variables:
  STACK: backend
  SERVICE: lab

build_jar:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: '$CI_COMMIT_TAG =~ /(v([0-9]+[.]){2}[0-9])/'
  script:
    - java -version
    - mvn -version
    - mvn clean package -DskipTests=true
  artifacts:
    paths:
      - target/*.jar

save_image:
  rules:
  - if: '$CI_COMMIT_TAG =~ /(v([0-9]+[.]){2}[0-9])/'
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build
        --build-arg JAVA_VER=${JAVA_VER}
        --build-arg JAVA_IMAGE=${JAVA_IMAGE}
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - docker image push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG

push2nicstg:
  stage: deploy
  rules:
  - if: '$CI_COMMIT_TAG =~ /(v([0-9]+[.]){2}[0-9])/'
    when: manual
  tags: [nicvpn]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker image pull $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker image tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG foscos.nic:3389/$SERVICE:$CI_COMMIT_TAG
    - docker image push foscos.nic:3389/$SERVICE:$CI_COMMIT_TAG

push2tatastg:
  stage: deploy
  rules:
  - if: '$CI_COMMIT_TAG =~ /(v([0-9]+[.]){2}[0-9])/'
    when: manual
  tags: [foscostatavpn]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker image pull $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker image tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG training.registry:3389/$SERVICE:$CI_COMMIT_TAG
    - docker image push training.registry:3389/$SERVICE:$CI_COMMIT_TAG
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
